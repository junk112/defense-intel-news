# 防衛情報インテリジェンス記事作成ガイドライン

## 🎯 HTML記事作成プロンプト（言語管理システム対応版）

### 基本指示
防衛・安全保障分野のダッシュボード型記事を作成してください。
以下のフォーマットと要件を厳守し、言語管理システムに対応した記事を作成してください。

【重要】
- このHTMLは「CSS名前空間システム」で表示されます
- bodyのスタイル（background、min-height等）は自動的に.article-contentに変換されて適用されます
- 言語メタタグを適切に設定することで、自動言語切り替えに対応します

### 📌 言語対応要件

#### 1. 言語メタタグ（必須）
HTMLのheadセクションに以下のメタタグを含めてください：

```html
<!-- 記事がサポートする言語（必須） -->
<meta name="article:languages" content="ja,en">  <!-- 両言語対応の場合 -->
<meta name="article:languages" content="ja">     <!-- 日本語のみの場合 -->
<meta name="article:languages" content="en">     <!-- 英語のみの場合 -->

<!-- 言語別タイトル（任意、両言語対応の場合推奨） -->
<meta name="title:ja" content="防衛省AI活用推進基本方針 - エグゼクティブダッシュボード">
<meta name="title:en" content="MOD AI Implementation Policy - Executive Dashboard">

<!-- 言語別説明（任意、両言語対応の場合推奨） -->
<meta name="description:ja" content="防衛省におけるAI活用の現状と今後の展開についての詳細分析">
<meta name="description:en" content="Comprehensive analysis of AI utilization and future deployment in MOD">
```

#### 2. 本文の言語切り替え対応
両言語対応記事の場合、以下のパターンで実装してください：

**パターンA: JavaScriptによる言語切り替え（推奨）**
```html
<script>
// 言語切り替え関数
function switchLanguage(lang) {
    // 日本語要素の表示/非表示
    document.querySelectorAll('.lang-ja').forEach(el => {
        el.style.display = lang === 'ja' ? 'block' : 'none';
    });
    // 英語要素の表示/非表示
    document.querySelectorAll('.lang-en').forEach(el => {
        el.style.display = lang === 'en' ? 'block' : 'none';
    });
    // ボタンのアクティブ状態更新
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.lang === lang);
    });
}

// デフォルト言語設定
window.addEventListener('DOMContentLoaded', () => {
    switchLanguage('ja'); // デフォルトは日本語
});
</script>

<style>
.lang-en { display: none; } /* 初期状態で英語は非表示 */
.lang-btn.active { 
    background: #2563eb; 
    color: white; 
}
</style>

<body>
    <!-- 言語切り替えボタン -->
    <div class="language-switcher">
        <button class="lang-btn active" data-lang="ja" onclick="switchLanguage('ja')">日本語</button>
        <button class="lang-btn" data-lang="en" onclick="switchLanguage('en')">English</button>
    </div>
    
    <!-- 日本語コンテンツ -->
    <div class="lang-ja">
        <h1>防衛省AI活用推進基本方針</h1>
        <p>防衛省におけるAI技術の活用について...</p>
    </div>
    
    <!-- 英語コンテンツ -->
    <div class="lang-en">
        <h1>MOD AI Implementation Policy</h1>
        <p>Regarding the utilization of AI technology in MOD...</p>
    </div>
</body>
```

**パターンB: 並列表示（シンプル）**
```html
<body>
    <div class="bilingual-content">
        <div class="japanese-section">
            <h1>防衛省AI活用推進基本方針</h1>
            <p>日本語の内容...</p>
        </div>
        <hr style="margin: 40px 0;">
        <div class="english-section">
            <h1>MOD AI Implementation Policy</h1>
            <p>English content...</p>
        </div>
    </div>
</body>
```

### 📋 HTMLテンプレート（言語対応版）

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[記事タイトル] - [英語タイトル]</title>
    
    <!-- 🌐 言語メタタグ（必須） -->
    <meta name="article:languages" content="ja,en">
    <meta name="title:ja" content="[日本語タイトル]">
    <meta name="title:en" content="[English Title]">
    <meta name="description:ja" content="[日本語説明]">
    <meta name="description:en" content="[English Description]">
    
    <!-- 📷 メイン画像（任意） -->
    <meta property="og:image" content="[画像URL]">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans JP', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: #333;
            line-height: 1.6;
            padding: 20px;
        }
        
        /* グリッドレイアウト（必須） */
        .grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        /* 言語切り替え用スタイル */
        .language-switcher {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            gap: 10px;
        }
        
        .lang-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.3s;
        }
        
        .lang-btn:hover {
            background: #f0f0f0;
        }
        
        .lang-btn.active {
            background: #2563eb;
            color: white;
            border-color: #2563eb;
        }
        
        .lang-en {
            display: none;
        }
    </style>
</head>
<body>
    <!-- 言語切り替えボタン（両言語対応の場合） -->
    <div class="language-switcher">
        <button class="lang-btn active" data-lang="ja" onclick="switchLanguage('ja')">日本語</button>
        <button class="lang-btn" data-lang="en" onclick="switchLanguage('en')">English</button>
    </div>
    
    <div class="dashboard">
        <!-- 日本語コンテンツ -->
        <div class="lang-ja">
            <!-- コンテンツ -->
        </div>
        
        <!-- 英語コンテンツ（両言語対応の場合） -->
        <div class="lang-en">
            <!-- Content -->
        </div>
    </div>
    
    <script>
        // 言語切り替え関数（両言語対応の場合）
        function switchLanguage(lang) {
            document.querySelectorAll('.lang-ja').forEach(el => {
                el.style.display = lang === 'ja' ? 'block' : 'none';
            });
            document.querySelectorAll('.lang-en').forEach(el => {
                el.style.display = lang === 'en' ? 'block' : 'none';
            });
            document.querySelectorAll('.lang-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.lang === lang);
            });
        }
        
        // その他のJavaScript関数
        function showTab(tabName) {
            // タブ切り替え実装
        }
    </script>
</body>
</html>
```

### 🏷️ ファイル名規則
```
YYYY-MM-DD-[slug].html
例：2025-08-25-defense-ai-strategy.html
```

### ✅ チェックリスト

#### 必須項目
- [ ] HTMLのlang属性設定（`<html lang="ja">`または`<html lang="en">`）
- [ ] `<meta name="article:languages" content="...">`の設定
- [ ] bodyスタイルでbackgroundとmin-heightの設定
- [ ] グリッドレイアウトで`display: grid`を明記
- [ ] JavaScript関数はグローバルスコープで定義
- [ ] onclick属性での関数呼び出し

#### 推奨項目（両言語対応記事の場合）
- [ ] `<meta name="title:ja">`と`<meta name="title:en">`の設定
- [ ] `<meta name="description:ja">`と`<meta name="description:en">`の設定
- [ ] 言語切り替えボタンの実装
- [ ] JavaScriptによる言語切り替え機能
- [ ] .lang-jaと.lang-enクラスでのコンテンツ分離

#### 任意項目
- [ ] `<meta property="og:image">`での画像設定
- [ ] メタディスクリプションの設定
- [ ] 著者情報の設定

### 🌍 言語別記事作成ガイド

#### 日本語のみの記事
```html
<meta name="article:languages" content="ja">
<!-- 日本語コンテンツのみを記述 -->
```

#### 英語のみの記事
```html
<html lang="en">
<meta name="article:languages" content="en">
<!-- English content only -->
```

#### 両言語対応記事
```html
<meta name="article:languages" content="ja,en">
<!-- 言語切り替え機能を実装 -->
<!-- 両方の言語のコンテンツを含める -->
```

### 📝 記事内容の推奨構造
1. **ヘッダー**: タイトル、サブタイトル、日付
2. **統計カード**: 主要数値の視覚的表示
3. **タブナビゲーション**: セクション切り替え
4. **コンテンツグリッド**: 情報のカード形式表示
5. **チャート/グラフ**: データの視覚化（Canvas/SVG）
6. **詳細モーダル**: クリックで詳細情報表示

### 🎨 推奨カラースキーム
- **防衛系**: `#1e3c72` → `#2a5298`
- **サイバー系**: `#0f172a` → `#1e293b`
- **インテリジェンス系**: `#2d1b69` → `#5b21b6`
- **海洋系**: `#0c4a6e` → `#0284c7`
- **航空系**: `#312e81` → `#4f46e5`

---

## システム側の自動処理

### 記事読み込み時の処理
1. **言語メタタグの自動解析**
   - `article:languages`から対応言語を判定
   - `title:ja`/`title:en`から言語別タイトル抽出
   - `description:ja`/`description:en`から言語別説明抽出

2. **言語自動判定**（メタタグがない場合）
   - 日本語文字（ひらがな/カタカナ/漢字）の含有率チェック
   - 英語文字（アルファベット）の含有率チェック
   - 自動的に言語フラグを設定

3. **言語バッジ表示**
   - 「日本語記事」「English Only」「日英対応」を自動表示
   - 記事一覧とホームページで言語情報を表示

4. **UIの動的切り替え**
   - ユーザーの言語設定に応じてタイトル/説明を切り替え
   - LocalStorageに言語設定を保存
   - サイト全体で言語設定を維持

このガイドラインに従って記事を作成することで、言語管理システムと完全に統合された記事を作成できます。